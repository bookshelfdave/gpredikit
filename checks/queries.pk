all {
    // all tests in this group must pass. Other groups are `any` and `none`. Groups can be
    // arbitrarily nested.

    title: "Demo the tiny set of core tests available ðŸ˜€"
    test exists? {
      // p(..) or path(..) allow for expansion of shell variables in a string
       path: p( $HOME/.zshrc )
    }

    // is the file /bin/zsh executable?
    /*
    test executable? {
      path: "/bin/zsh"
      extra_param:    true
    }
    */

    // is the `zsh` command on the path?
    test on_path? {
      path: "zsh"
    }

    // Check if a file does NOT exist
    test not exists? {
       path: "/home/dparfitt/.foo"
    }

    // Only a few operations exist out of the box, but checking open
    // ports and a few other misc networking tests could be useful.
    //test not port_open? {
    //    port: 6666
    //    // on_* properties are hooks that can run arbitrary shell commands
    //    on_pass: "echo 'Development server port is not in use'"
    //    on_fail: "echo 'Port 6666 is in use, please stop whatever service is using port 6666'"
   // }

    // Prepending an @ to a test enables automatic retrying until success and makes the `retries` and `retry_delay`
    // properties available in your test.
    // This tests if `localhost:53` is open 10 times with a 1 second + 50 millisecond + 10ns delay (arbitrary, I know)
    //@test port_addr_open? {
    //    addr_port: "localhost:53"
    //    retries: 10
    //    retry_delay: d(1s 50ms 10ns)  // d(..) represents a duration format
   // }
}


// Define reusable tools with a "tool" block that can be used with the "test" keyword.
// Tool definitions can live in separate test files, so libraries of common functionality can be built up
// and included in your tests.
// See the tests below for examples of using this tool
tool pacman_installed? {
    // a tool has a Handlebars template that is rendered at runtime using
    // defined properties. In this case, pkg_name is rendered as part of the command
    // A non-zero exit code indicates failure!
    cmd_template: "pacman -Qe {{pkg_name}}"

    // Define a `pkg_name` property for `pacman_installed?` that only accepts strings
    $pkg_name {
        type: String
        required: true
    }
}

all {

  assert get_version_number {
    cmd: "go --version | awk '{ print $3 }'"
  } == "go.1.23.6"

  assert get_version_number {
    cmd: "go --version | awk '{ print $3 }'"
  } =~ re("go\.1.23.+")

}
